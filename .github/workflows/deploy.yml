name: CI/CD Deploy (Terraform + EC2 + Amsa)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    # 1Ô∏è‚É£ Checkout repository
    - name: Checkout Repository
      uses: actions/checkout@v4

    # 2Ô∏è‚É£ Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    # 3Ô∏è‚É£ Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 4Ô∏è‚É£ Terraform Init & Apply
    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve -var-file="terraform.tfvars"

    # 5Ô∏è‚É£ Get EC2 Public IP from Terraform output
    - name: Get EC2 Public IP
      id: get_ip
      working-directory: terraform
      run: |
        IP=$(terraform output -raw public_ip)
        echo "EC2_HOST=$IP" >> $GITHUB_ENV
        echo "EC2 instance IP: $IP"

    # 6Ô∏è‚É£ Install SSH client
    - name: Install SSH Client
      run: sudo apt-get install -y openssh-client

    # 7Ô∏è‚É£ Add SSH key and set permissions
    - name: Setup SSH Key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > amsa_key.pem
        chmod 600 amsa_key.pem
        mkdir -p ~/.ssh
        echo "StrictHostKeyChecking no" >> ~/.ssh/config

    # 8Ô∏è‚É£ Deploy Backend (backend-amsa)
    - name: Deploy Backend
      run: |
        ssh -i amsa_key.pem ${{ secrets.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          set -e
          sudo apt update -y
          sudo apt install -y curl
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt install -y nodejs
          sudo npm install -g pm2
          
          if [ ! -d "/home/ubuntu/backend-amsa" ]; then
            git clone https://github.com/prathamesh0413/Amsa-terraform.git /home/ubuntu/backend-amsa
          fi
          
          cd /home/ubuntu/backend-amsa/backend-amsa
          git pull origin main
          npm install --legacy-peer-deps
          pm2 restart amsa-backend || pm2 start server.js --name amsa-backend --watch
          pm2 save
        EOF

    # 9Ô∏è‚É£ Deploy Frontend
    - name: Deploy Frontend
      run: |
        ssh -i amsa_key.pem ${{ secrets.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          set -e
          sudo apt update -y
          sudo apt install -y nginx curl
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt install -y nodejs
          
          cd /home/ubuntu
          if [ ! -d "/home/ubuntu/Amsa-frontend" ]; then
            git clone https://github.com/prathamesh0413/Amsa-frontend.git
          fi
          cd Amsa-frontend
          git pull origin main
          npm install
          npm run build
          sudo mkdir -p /var/www/amsa-fe
          sudo cp -r out/* /var/www/amsa-fe/
          sudo systemctl restart nginx
        EOF

    # üîü Output success message
    - name: Deployment Complete
      run: echo "‚úÖ Amsa Deployment Complete! Visit http://${{ env.EC2_HOST }}"
