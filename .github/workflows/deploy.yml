name: CI/CD Deploy (Terraform + EC2 + Amsa)

on:
  push:
    branches:
      - main

jobs:
  # -------------------------------
  # 1️⃣ Terraform Job — Create EC2
  # -------------------------------
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve -var-file="terraform.tfvars"

      - name: Get EC2 Public IP
        id: get_ip
        working-directory: terraform
        run: |
          IP=$(terraform output -raw public_ip)
          echo "$IP" > ec2_ip.txt
          echo "✅ EC2 instance IP: $IP"

      - name: Upload EC2 IP as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ec2-ip
          path: terraform/ec2_ip.txt

  # -------------------------------
  # 2️⃣ Deploy Job — FE + BE
  # -------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Download EC2 IP
        uses: actions/download-artifact@v4
        with:
          name: ec2-ip
          path: .

      - name: Read EC2 IP
        id: read_ip
        run: |
          EC2_HOST=$(cat ec2_ip.txt)
          echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV
          echo "✅ Using EC2 Host: $EC2_HOST"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # -------------------------------
      # Frontend Build (in root)
      # -------------------------------
      - name: Build Frontend
        run: |
          npm install
          npm run build

      # -------------------------------
      # Backend Setup
      # -------------------------------
      - name: Build Backend
        working-directory: backend-amsa
        run: npm install

      # -------------------------------
      # Deploy to EC2 via SSH
      # -------------------------------
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo "🚀 Starting deployment on EC2..."

            # Clone or update repo
            if [ ! -d "/home/ubuntu/Amsa-terraform" ]; then
              git clone https://github.com/prathamesh0413/Amsa-terraform.git /home/ubuntu/Amsa-terraform
            fi

            cd /home/ubuntu/Amsa-terraform
            git pull origin main

            # --- Backend Deployment ---
            echo "📦 Deploying Backend..."
            cd backend-amsa
            npm install --legacy-peer-deps
            pm2 restart amsa-backend || pm2 start server.js --name amsa-backend --watch
            pm2 save

            # --- Frontend Deployment ---
            echo "📦 Deploying Frontend..."
            cd /home/ubuntu/Amsa-terraform
            npm install --legacy-peer-deps
            npm run build
            npm run export || true
            sudo rm -rf /var/www/amsa-fe
            sudo mkdir -p /var/www/amsa-fe
            sudo cp -r out/* /var/www/amsa-fe/

            # --- Nginx Reload ---
            sudo nginx -t
            sudo systemctl restart nginx

            echo "✅ Deployment complete for Amsa Frontend + Backend!"
